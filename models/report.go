package models

import (
	"time"
)

const GITRFC = "Mon, 2 Jan 2006 15:04:05 -0700"

// Report holds performance statistics generated by a load test work.
type Report struct {

	// Input arguments to the load test work
	Input

	// Elasticsearch doc id
	ReportId string `json:"report_id"`
	// see GITRFC
	ReportDate string `json:"report_date"`
	// hey-apm host
	ReporterHost string `json:"reporter_host"`
	// like reportDate, but better for querying ES and sorting
	Timestamp time.Time `json:"@timestamp"`
	// any arbitrary strings set by the user, meant to filter results
	Labels []string `json:"labels,omitempty"`
	// name of the test run
	TestName string `json:"test_name,omitempty"`
	// apm-server release version or build sha
	ApmVersion string `json:"apm_version,omitempty"`
	// commit SHA
	ApmBuild string `json:"apm_build,omitempty"`
	// commit date
	ApmBuildDate time.Time `json:"apm_build_date,omitempty"`
	// list of settings apm-server has been started with
	// some are explicitly omitted (eg passwords)
	// only captured options passed with -E when expvar is enabled
	ApmSettings map[string]string `json:"apm_settings,omitempty"`

	// total elapsed (timeout + flush)
	Elapsed float64 `json:"elapsed"`

	// number of total requests to apm-server
	Requests uint64 `json:"requests"`
	// number of total failed requests
	FailedRequests uint64 `json:"failed_requests"`

	// TODO
	// total number of responses
	// Responses uint64 `json:"responses"`
	// total number of responses
	// Responses202 uint64 `json:"responses_202"`
	// total number of responses
	// Responses4XX uint64 `json:"responses_4xx"`
	// total number of responses
	// Responses5XX uint64 `json:"responses_5xx"`
	// 202 / total
	// ResponseSuccessRatio *float64 `json:"response_success_ratio"`
	//
	// number of stacktrace frames per error
	// ErrorFrames int `json:"error_frames"`

	// number of errors generated
	ErrorsGenerated uint64 `json:"errors_generated"`
	// number of errors sent to apm-server
	ErrorsSent uint64 `json:"errors_sent"`
	// number of errors indexed in Elasticsearch
	ErrorsIndexed uint64 `json:"errors_indexed"`

	// number of transactions generated (as per user input)
	TransactionsGenerated uint64 `json:"transactions_generated"`
	// number of transactions sent to apm-server
	TransactionsSent uint64 `json:"transactions_sent"`
	// number of transactions indexed in Elasticsearch
	TransactionsIndexed uint64 `json:"transactions_indexed"`
	// TODO
	// number of stacktrace frames per span
	// SpanFrames int `json:"span_frames"`
	// number of generated spans
	SpansGenerated uint64 `json:"spans_generated"`
	// number of spans sent to apm-server
	SpansSent uint64 `json:"spans_sent"`
	// number of spans indexed in Elasticsearch
	SpansIndexed uint64 `json:"spans_indexed"`

	// total generated
	EventsGenerated uint64 `json:"events_generated"`
	// total sent
	EventsSent uint64 `json:"events_sent"`
	// total accepted
	EventsAccepted uint64 `json:"events_accepted"`
	// total indexed
	EventsIndexed uint64 `json:"events_indexed"`

	// total memory allocated in bytes
	TotalAlloc *int64 `json:"total_alloc,omitempty"`
	// total memory allocated in the heap, in bytes
	HeapAlloc *int64 `json:"heap_alloc,omitempty"`
	// total number of mallocs
	Mallocs *int64 `json:"mallocs,omitempty"`
	// number of GC runs
	NumGC *int64 `json:"num_gc,omitempty"`
}

func (r Report) date() time.Time {
	t, _ := time.Parse(GITRFC, r.ReportDate)
	return t
}

func (r Report) Performance() float64 {
	if r.Elapsed > 0 {
		return float64(r.EventsIndexed) / r.Elapsed
	}
	return 0
}
